name: Terraform Deploy

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'fastfood-infra/**'
      - '.github/workflows/terraform-deploy.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'fastfood-infra/**'
      - '.github/workflows/terraform-deploy.yml'

env:
  TF_VERSION: '1.6.0'
  AWS_REGION: 'us-east-1'
  WORKING_DIRECTORY: '.'

jobs:
  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Format Check
      run: terraform fmt -check
      working-directory: fastfood-infra

    - name: Terraform Init
      run: terraform init
      working-directory: fastfood-infra

    - name: Terraform Validate
      run: terraform validate
      working-directory: fastfood-infra

    - name: Terraform Plan
      run: terraform plan -no-color
      working-directory: fastfood-infra
      env:
        TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
        TF_VAR_jwt_secret: ${{ secrets.JWT_SECRET }}

  terraform-apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Build Lambda Functions
      run: |
        echo "üîß Building Lambda functions..."
        
        # Build auth Lambda
        cd fastfood-lambda/auth
        pip install -r requirements.txt -t .
        zip -r ../../fastfood-infra/lambda-auth.zip .
        echo "‚úÖ Auth Lambda function built successfully!"
        
        # Build Cognito challenge Lambda
        cd ../cognito-challenge
        pip install -r requirements.txt -t .
        zip -r ../../fastfood-infra/lambda-cognito-challenge.zip .
        echo "‚úÖ Cognito challenge Lambda function built successfully!"

    - name: Terraform Init
      run: terraform init
      working-directory: ${{ env.WORKING_DIRECTORY }}

    - name: Terraform Validate
      run: terraform validate
      working-directory: ${{ env.WORKING_DIRECTORY }}

    - name: Terraform Plan
      run: terraform plan -no-color
      working-directory: ${{ env.WORKING_DIRECTORY }}
      env:
        TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
        TF_VAR_jwt_secret: ${{ secrets.JWT_SECRET }}

    - name: Terraform Apply
      run: terraform apply -auto-approve
      working-directory: ${{ env.WORKING_DIRECTORY }}
      env:
        TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
        TF_VAR_jwt_secret: ${{ secrets.JWT_SECRET }}

    - name: Get API Gateway URL
      run: |
        echo "üåê API Gateway URL:"
        terraform output api_gateway_url
        echo ""
        echo "üîó Login endpoint:"
        echo "$(terraform output -raw api_gateway_url)/auth/login"
      working-directory: ${{ env.WORKING_DIRECTORY }}

    - name: Comment PR with outputs
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const output = `## üöÄ Terraform Deploy Results
          
          **API Gateway URL:** \`${{ steps.terraform-apply.outputs.api_gateway_url }}\`
          
          **Login Endpoint:** \`${{ steps.terraform-apply.outputs.api_gateway_url }}/auth/login\`
          
          **Deployment Status:** ‚úÖ Success
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          });